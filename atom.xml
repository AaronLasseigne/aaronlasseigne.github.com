<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ficate]]></title>
  <link href="http://AaronLasseigne.github.com/atom.xml" rel="self"/>
  <link href="http://AaronLasseigne.github.com/"/>
  <updated>2012-06-02T13:07:32-05:00</updated>
  <id>http://AaronLasseigne.github.com/</id>
  <author>
    <name><![CDATA[Aaron Lasseigne]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Have you lost a second of data?]]></title>
    <link href="http://AaronLasseigne.github.com/blog/2012/02/29/have-you-lost-a-second-of-data/"/>
    <updated>2012-02-29T15:42:00Z</updated>
    <id>http://AaronLasseigne.github.com/blog/2012/02/29/have-you-lost-a-second-of-data</id>
    <content type="html"><![CDATA[<p><strong>UPDATE:</strong> Based on some good <a href="http://www.reddit.com/r/rails/comments/qberl/have_you_lost_a_second_of_data/">Reddit</a> discussions I&#8217;ve revised the &#8220;Only use ranges.&#8221; section to use a range with an exclusive end.</p>

<p>One of the gems I&#8217;m working on limits a range of data based on a datetime field. I use a SQLite database (version 3.7.7) in my automated testing, but ultimately it&#8217;s going to run on MySQL (version 5.5.19) and possibly others. The ease of SQLite makes this a fairly common setup. ActiveRecord (version 3.2.1) helps alleviate cross database issues but it doesn&#8217;t cover all cases. You see MySQL stores datetimes to a resolution of one second. Databases like SQLite and PostgreSQL store down to the microsecond (.999999). This leads to a problem.</p>

<h3>The Problem</h3>

<p>If, like me, the bulk of your time has been spent working with MySQL then microseconds may seem reasonable but foreign. A typical ActiveRecord <code>where</code> call would give you all results from within a second. In SQLite that same call gives results from the exact microsecond specified.</p>

<!-- more -->




<figure class='code'> <div class="highlight"><table><tr><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="no">Test</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">created_at</span><span class="p">:</span> <span class="no">Time</span><span class="o">.</span><span class="n">zone</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s1">&#39;2012-01-01 00:00:01&#39;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># MySQL</span>
</span><span class='line'><span class="no">SELECT</span> <span class="s2">&quot;tests&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;tests&quot;</span> <span class="no">WHERE</span> <span class="s2">&quot;tests&quot;</span><span class="o">.</span><span class="s2">&quot;created_at&quot;</span> <span class="o">=</span> <span class="s1">&#39;2012-01-01 06:00:01&#39;</span>
</span><span class='line'><span class="mi">4</span> <span class="no">Results</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># SQLite</span>
</span><span class='line'><span class="no">SELECT</span> <span class="s2">&quot;tests&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;tests&quot;</span> <span class="no">WHERE</span> <span class="s2">&quot;tests&quot;</span><span class="o">.</span><span class="s2">&quot;created_at&quot;</span> <span class="o">=</span> <span class="s1">&#39;2012-01-01 06:00:01.000000&#39;</span>
</span><span class='line'><span class="mi">1</span> <span class="no">Result</span>
</span></code></pre></td></tr></table></div></figure>


<p>Searching for a single second isn&#8217;t too common. How about all records from a particular day?</p>

<figure class='code'> <div class="highlight"><table><tr><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="no">Test</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">created_at</span><span class="p">:</span> <span class="no">Time</span><span class="o">.</span><span class="n">zone</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s1">&#39;2012-01-01 00:00:00&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">.</span><span class="no">Time</span><span class="o">.</span><span class="n">zone</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s1">&#39;2012-01-01 23:59:59&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>In databases that measure microseconds you&#8217;re going to be missing any information that occurred between &#8220;23:59:59.000000&#8221; and &#8220;23:59:59.999999&#8221;. You&#8217;ve missed almost a full second of data. What if your ecommerce site made a sale in that one second?</p>

<h3>Solutions</h3>

<p>So, how do we handle this?</p>

<h4>Build to the database you&#8217;re using.</h4>

<p>This is the most common route when building applications. Only one brand of database is used and if it changes the process won&#8217;t be seamless anyway. What&#8217;s one more to-do item on the database migration checklist? Additionally, costs are deferred until you switch databases which may never occur. It&#8217;s not an ideal option, but it&#8217;s a realistic one. For those writing publicly available gems, limiting your support limits your audience.</p>

<h4>Chop all microseconds off and store everything to only a one second resolution.</h4>

<p>I hate to lose data. It may not matter to your application now but you can never get it back. If you&#8217;re authoring a public gem this might get you lynched.</p>

<h4>Use the &#8220;%&#8221; wildcard.</h4>

<p>You could do something with <code>LIKE</code> and string conversion where the &#8220;%&#8221; wildcard is used at the end of a datetime string. It might be a clever idea but it breaks if you&#8217;re working with time zones. It&#8217;s best to avoid this approach.</p>

<h4>Customize for each database.</h4>

<p>Embrace the differences by adding conditionals to alter the code depending on the database adapter in use (<code>ActiveRecord::Base.connection.class</code>). Most databases record some fraction of a second, MySQL is the odd one out. Providing a special case for MySQL and handling the rest with a default should work. When writing a public gem, it&#8217;s hard to go wrong with this approach. In applications it&#8217;ll clutter things up significantly to do this everywhere. Make sure to create global scopes, helpers, etc to <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a> it up.</p>

<h4>Only use ranges.</h4>

<p>One last solution is to stick with ranges. Notice in the example below that the range excludes the end value (3 dots rather than 2).</p>

<figure class='code'> <div class="highlight"><table><tr><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">datetime</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">zone</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s1">&#39;2012-01-01&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="no">Test</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">created_at</span><span class="p">:</span> <span class="n">datetime</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">(</span><span class="n">datetime</span><span class="o">.</span><span class="n">advance</span><span class="p">(</span><span class="n">days</span><span class="p">:</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># MySQL</span>
</span><span class='line'><span class="no">SELECT</span> <span class="s2">&quot;tests&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;tests&quot;</span> <span class="no">WHERE</span> <span class="p">(</span><span class="s2">&quot;tests&quot;</span><span class="o">.</span><span class="s2">&quot;created_at&quot;</span> <span class="o">&gt;=</span> <span class="s1">&#39;2012-01-01 00:00:00&#39;</span> <span class="no">AND</span> <span class="s2">&quot;testers&quot;</span><span class="o">.</span><span class="s2">&quot;created_at&quot;</span> <span class="o">&lt;</span> <span class="s1">&#39;2012-01-02 00:00:00&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># SQLite</span>
</span><span class='line'><span class="no">SELECT</span> <span class="s2">&quot;tests&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;tests&quot;</span> <span class="no">WHERE</span> <span class="p">(</span><span class="s2">&quot;tests&quot;</span><span class="o">.</span><span class="s2">&quot;created_at&quot;</span> <span class="o">&gt;=</span> <span class="s1">&#39;2012-01-01 00:00:00.000000&#39;</span> <span class="no">AND</span> <span class="s2">&quot;testers&quot;</span><span class="o">.</span><span class="s2">&quot;created_at&quot;</span> <span class="o">&lt;</span> <span class="s1">&#39;2012-01-02 00:00:00.000000&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That retrieves the entire days data in both MySQL and SQLite. The <code>advance</code> function includes a variety of increments ranging from seconds to years. Using an exclusive end rather than inclusive helps to avoid another pitfall, leap seconds. When needed, leap seconds are added at the end of the day. Inclusive searches to &#8216;23:59:59.999999&#8217; aren&#8217;t going to catch that extra second.</p>

<h3>Conclusion</h3>

<p>One day ActiveRecord might handle these differences, but for now using per database conditionals or sticking to ranges will have to do. It&#8217;s worth noting that the amount of fractional time stored does vary. Some databases even allow you to specify a precision. If you know of a better way to tackle this problem drop a comment below. Let&#8217;s find those missing seconds.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Explaining Include and Extend]]></title>
    <link href="http://AaronLasseigne.github.com/blog/2012/01/17/explaining-include-and-extend/"/>
    <updated>2012-01-17T14:48:00Z</updated>
    <id>http://AaronLasseigne.github.com/blog/2012/01/17/explaining-include-and-extend</id>
    <content type="html"><![CDATA[<p>All Rubyists should be familiar with the common definitions for <code>include</code> and <code>extend</code>. You <code>include</code> a module to add instance methods to a class and <code>extend</code> to add class methods. Unfortunately, this common definition isn&#8217;t entirely accurate. It fails to explain why we use <code>instance.extend(Module)</code> to add methods to an instance. Shouldn&#8217;t it be <code>instance.include(Module)</code>? To figure this out we&#8217;re going to start by discussing where methods are stored.</p>

<h3>The methods I&#8217;m storing for you and the guy holding mine.</h3>

<p>Objects in Ruby do not store their own methods. Instead, they create a singleton class to hold onto their methods.</p>

<figure class='code'> <div class="highlight"><table><tr><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">who_am_i</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="nb">self</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">speak_up</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">input</span><span class="o">.</span><span class="n">upcase</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The interpreter will create an <code>A</code> class and a singleton class to attach to it (we&#8217;ll refer to the singleton class of an object by prepending <code>'</code> to the object name). Any instance methods (i.e. <code>speak_up</code>) are added to the methods stored on <code>A</code>. The class methods (i.e. <code>who_am_i</code>) are stored on <code>'A</code>.</p>

<figure class='code'> <div class="highlight"><table><tr><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">A</span><span class="o">.</span><span class="n">singleton_methods</span> <span class="c1"># methods on &#39;A</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:who_am_i</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p><img src="http://AaronLasseigne.github.com/images/explaining-include-and-extend/1.png" alt="a class and its singleton" /></p>

<p>This same process happens with instance objects. If we have an instance of <code>A</code> and we add a method to it we can&#8217;t store it on the instance. Remember, objects in Ruby do not store their own methods.</p>

<figure class='code'> <div class="highlight"><table><tr><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nc">a</span><span class="o">.</span><span class="nf">not_so_loud</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">input</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once again we create a singleton class for <code>a</code> to store the <code>not_so_loud</code> method.</p>

<p><img src="http://AaronLasseigne.github.com/images/explaining-include-and-extend/2.png" alt="an instance and its singleton" /></p>

<p>Now we have a method that only belongs to <code>a</code> and does not affect other instances of <code>A</code>.</p>

<h3>I&#8217;m my own father?</h3>

<p>The <code>A</code> class holds the methods and knows the inheritance chain needed for <code>a</code> and all other instances of <code>A</code>. Similarly the singleton class, <code>'A</code>, holds the methods and knows the inheritance chain for <code>A</code>. You can think of <code>A</code> as an instance of <code>'A</code>. The catch is that we don&#8217;t talk directly to <code>'A</code>. This means we need some way to distinguish between adding methods to <code>A</code> and <code>'A</code>. That&#8217;s where <code>include</code> and <code>extend</code> come in.</p>

<h3>include</h3>

<p>When you <code>include</code> a module in an object, you&#8217;re adding the methods into the inheritance chain that the object is tracking.</p>

<figure class='code'> <div class="highlight"><table><tr><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>  <span class="kp">include</span> <span class="n">M</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://AaronLasseigne.github.com/images/explaining-include-and-extend/3.png" alt="include M on A" /></p>

<p>We can see that this is the case by checking <code>A</code>&#8217;s ancestors.</p>

<figure class='code'> <div class="highlight"><table><tr><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">A</span><span class="o">.</span><span class="n">ancestors</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="n">A</span><span class="p">,</span> <span class="n">M</span><span class="p">,</span> <span class="no">Object</span><span class="p">,</span> <span class="no">Kernel</span><span class="p">,</span> <span class="no">BasicObject</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>extend</h3>

<p>Using <code>extend</code> is the same as doing an <code>include</code> on the object&#8217;s singleton class.</p>

<figure class='code'> <div class="highlight"><table><tr><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="n">M</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://AaronLasseigne.github.com/images/explaining-include-and-extend/4.png" alt="extend M on A" /></p>

<p>Once again we can confirm this by checking <code>'A</code>&#8217;s ancestors.</p>

<figure class='code'> <div class="highlight"><table><tr><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">A</span><span class="o">.</span><span class="n">singleton_class</span><span class="o">.</span><span class="n">ancestors</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="n">M</span><span class="p">,</span> <span class="no">Class</span><span class="p">,</span> <span class="no">Module</span><span class="p">,</span> <span class="no">Object</span><span class="p">,</span> <span class="no">Kernel</span><span class="p">,</span> <span class="no">BasicObject</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can also call <code>extend</code> on an instance.</p>

<figure class='code'> <div class="highlight"><table><tr><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">M</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="n">a</span><span class="o">.</span><span class="n">singleton_class</span><span class="o">.</span><span class="n">ancestors</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="n">M</span><span class="p">,</span> <span class="n">A</span><span class="p">,</span> <span class="no">Object</span><span class="p">,</span> <span class="no">Kernel</span><span class="p">,</span> <span class="no">BasicObject</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://AaronLasseigne.github.com/images/explaining-include-and-extend/5.png" alt="instance of a extended by M" /></p>

<p>If you think of <code>extend</code> as a way to add class methods then what we just did doesn&#8217;t make much sense. Once you reframe it as adding methods to the singleton of an object the picture above becomes more clear.</p>

<h3>Included Hook</h3>

<p>Any time you call <code>include</code> it will check the module to see if there is a method named <code>included</code>. This method is executed when the module is included. It&#8217;s like an <code>initialize</code>
for includes. As you might suspect, <code>extend</code> has its own version of this called <code>extended</code>. When you want to add both instance and class methods you can do so using the included hook.</p>

<figure class='code'> <div class="highlight"><table><tr><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">M</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>    <span class="n">base</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="no">ClassMethods</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">speak_up</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">input</span><span class="o">.</span><span class="n">upcase</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">who_am_i</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="kp">include</span> <span class="n">M</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="n">C</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works by first including <code>M</code> into <code>C</code>&#8217;s inheritance chain.</p>

<p><img src="http://AaronLasseigne.github.com/images/explaining-include-and-extend/6.png" alt="include M on C" /></p>

<p>Then we <code>extend</code> from <code>C</code> which adds the methods to <code>'C</code>&#8217;s inheritance chain.</p>

<p><img src="http://AaronLasseigne.github.com/images/explaining-include-and-extend/7.png" alt="extend M on C" /></p>

<h3>Conclusion</h3>

<p>When you start to dig past the common uses <code>include</code> and <code>extend</code> can seem odd and intimidating. Once you understand the underlying implementation it all starts to make better sense. Let&#8217;s define <code>include</code> and <code>extend</code> once more.</p>

<p><code>include</code>: adds methods from the provided Module to the object</p>

<p><code>extend</code>: calls <code>include</code> on the singleton class of the object</p>

<p> If you want a more details about what the interpreter is doing I recommend watching <a href="http://mwrc2008.confreaks.com/11farley.html">Patrick Farley&#8217;s talk on Ruby Internals</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tableficate 0.3.0 released]]></title>
    <link href="http://AaronLasseigne.github.com/blog/2012/01/03/tableficate-0-dot-3-0-released/"/>
    <updated>2012-01-03T16:22:00Z</updated>
    <id>http://AaronLasseigne.github.com/blog/2012/01/03/tableficate-0-dot-3-0-released</id>
    <content type="html"><![CDATA[<p>The <a href="https://github.com/sei-mi/tableficate">0.3.0</a> release adds support for table <a href="http://www.w3.org/TR/html4/struct/tables.html#h-11.2.2">captions</a> and for default text in tables without data. Styling options were greatly increased especially in relation to columns. You can now add attributes to the header, column (via the <a href="http://www.w3.org/TR/html4/struct/tables.html#h-11.2.4.2">col</a> tag) and individual cells. Cell attributes can be either strings or procs. If you pass a proc it will evaluate for each cell.</p>

<figure class='code'> <div class="highlight"><table><tr><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% t.column(:total,</span>
</span><span class='line'><span class="sx"> </span> <span class="n">cell_attrs</span><span class="p">:</span> <span class="p">{</span><span class="n">style</span><span class="p">:</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">row</span><span class="p">){</span>
</span><span class='line'>    <span class="s2">&quot;color: </span><span class="si">#{</span><span class="n">row</span><span class="o">.</span><span class="n">total</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">?</span> <span class="s1">&#39;black&#39;</span> <span class="p">:</span> <span class="s1">&#39;red&#39;</span><span class="si">}</span><span class="s2">;&quot;</span>
</span><span class='line'>  <span class="p">}}</span>
</span><span class='line'><span class="p">)</span> <span class="o">%&gt;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Filters automatically detect the input type based on the database column type and field name. For example, booleans will produce a check box filter and string columns with &#8220;email&#8221; in the name will produce an input field with the type set to &#8220;email&#8221;.</p>

<!--more-->


<p>Additionally, date searching works more like you would intuitively expect. If you have a datetime or timestamp database field and you search with a date only it will automatically assume you mean the entire day. So, searching for &#8220;2011-01-03&#8221; will search from &#8220;2011-01-03 00:00:00&#8221; to &#8220;2011-01-03 23:59:59&#8221;. The ranged version does the same thing with the start and end dates inclusively searched.</p>

<p>A full list of changes can be found in the <a href="https://github.com/sei-mi/tableficate/blob/master/changelog.markdown">changelog</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tableficate 0.2.0 released]]></title>
    <link href="http://AaronLasseigne.github.com/blog/2011/12/06/tableficate-0-dot-2-0-released/"/>
    <updated>2011-12-06T23:20:00Z</updated>
    <id>http://AaronLasseigne.github.com/blog/2011/12/06/tableficate-0-dot-2-0-released</id>
    <content type="html"><![CDATA[<p>The new version includes a complete rewrite of filters. I&#8217;ve made it a lot more like <a href="https://github.com/plataformatec/simple_form">simple_form</a> and I&#8217;m really happy with the result. You can get the latest code on <a href="https://github.com/sei-mi/tableficate">github</a> or take a look at the new <a href="https://github.com/sei-mi/tableficate/wiki">wiki docs</a> for more info.</p>
]]></content>
  </entry>
  
</feed>
